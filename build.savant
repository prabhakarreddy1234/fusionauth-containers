/*
 * Copyright (c) 2018-2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
savantVersion = "1.0.0"


project(group: "io.fusionauth", name: "fusionauth-containers", version: "1.15.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  publications {
    docker {
      publication(name: "fusionauth-app-dockerfile", type: "docker", file: "docker/fusionauth/fusionauth-app/Dockerfile")
      publication(name: "fusionauth-search-dockerfile", type: "docker", file: "docker/fusionauth/fusionauth-search/Dockerfile")
      publication(name: "fusionauth-docker-compose", type: "yml", file: "docker/fusionauth/docker-compose.yml")
    }
  }
}

/*
 * Define Plugins
 */
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")

/*
 * Targets
 */

target(name: "clean", description: "Clean project") {
  // No Op
}

target(name: "int", description: "runs an integration build") {
  // No Op
}

target(name: "idea", description: "Releases a local integration build of the project") {
  idea.iml()
}

target(name: "release-docker", description: "Releases the Docker images to DockerHub") {
  // Build images
  if (!cleanExecute("docker", "build", "-t", "fusionauth/fusionauth-app:${project.version}" as String, "./docker/fusionauth/fusionauth-app")) {
    fail("Failed to build Docker image for fusionauth-app [${project.version}]")
  }

  if (!cleanExecute("docker", "tag", "fusionauth/fusionauth-app:${project.version}" as String, "fusionauth/fusionauth-app:latest" as String)) {
    fail("Failed to build Docker image for fusionauth-app [latest]")
  }

  if (!cleanExecute("docker", "build", "-t", "fusionauth/fusionauth-search:${project.version}" as String, "./docker/fusionauth/fusionauth-search")) {
    fail("Failed to build Docker image for fusionauth-search [${project.version}]")
  }

  if (!cleanExecute("docker", "tag", "fusionauth/fusionauth-search:${project.version}" as String, "fusionauth/fusionauth-search:latest" as String)) {
    fail("Failed to build Docker image for fusionauth-search [latest]")
  }

  // Push images
  if (!cleanExecute("docker", "push", "fusionauth/fusionauth-app:${project.version}" as String)) {
    fail("Failed to push Docker image for fusionauth-app [${project.version}]")
  }

  if (!cleanExecute("docker", "push", "fusionauth/fusionauth-app:latest" as String)) {
    fail("Failed to push Docker image for fusionauth-app [latest]")
  }

  if (!cleanExecute("docker", "push", "fusionauth/fusionauth-search:${project.version}" as String)) {
    fail("Failed to push Docker image for fusionauth-search [${project.version}]")
  }

  if (!cleanExecute("docker", "push", "fusionauth/fusionauth-search:latest" as String)) {
    fail("Failed to push Docker image for fusionauth-search [latest]")
  }
}

target(name: "release", description: "Releases a full version of the project") {
  release.release()
}

boolean cleanExecute(String... args) {
  ProcessBuilder pb = new ProcessBuilder(args).inheritIO().directory(new File('.'))

  def process = pb.start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}
